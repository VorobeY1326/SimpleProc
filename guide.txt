Основы verilog:

1) Все есть модули; модуль описывается так:

module A(a,b,c);
..
endmodule

( где A - имя модуля, a b c - входящие/исходящие провода )


2) Описание переменных:

input a;        -  входящий провод разрядности 1 бит
output b;       -  исходящий провод разрядности 1 бит
input [0:7] c;  -  входящий провод разрядности 8 бит
reg [0:7] d;    -  регистр разрядности 8 бит

Может быть сразу 2 определения:

output [0:3] a;
reg [0:3] a;

( это значит, что есть регистр и его значение выводится на исходящий провод )


3) Работа с часами:

Команда always делает что-то постоянно.
Если менять в ней сигнал на обратный и добавить задержку, получаем часы:

always #10 clock = ~clock;

( каждые 10 условных единиц ( вроде миллисекунд ) меняй сигнал clock на обратный )

Обработка сигнала часов работает так:

always @(posedge clock)
begin
  ..
end

( каждый раз при смене clock с низкого сигнала на высокий выполни какой-то код )


4) Инструкция непрерывного присвоения:

assign a = q;

( такая запись обозначает, что ВСЕГДА на выход a будет подаваться сигнал q,
если сигнал q меняется, то сразу же меняется и сигнал a )


5) Работа с массивами:

Массив записывается как очень большой регистр:

reg [0:1023] memory;

Считывание возможно 2 вариантами:

a = memory[14:26]   - делает срез массива с 14ого по 26-ой бит
b = memory[14+:26]  - делает срез 26-ти бит, начиная с 14ого


6) Логика работы и зачем нам часы:

Цикл процессора происходит по следующим шагам:
  
  -> тикают часы, указатель команд меняет текущий адрес команды на новый, приходящий к нему снаружи
  -> состояние процессора меняется ( считывается новая команда, новые данные, АЛУ считает новый результат ), пока все не стабилизируется
     ( все это происходит одновременно, большинство устройств не ждут сигнал часов, а постоянно выдают на выход текущий результат )
  -> снова тикают часы, при этом если необходимо, то происходит запись в регистр/память/etc
     ( запись нельзя делать постоянно, в отличии от чтения,
	     по понятным причинам - не стабилизировавшийся процессор может записать что угодно куда угодно )
     ( одновременно этот тик часов является и первым шагом, то есть по нему указатель команд выдает новую команду )


Схема с цифрами, которые указаны в комментариях к устройствам ( в модуле main ):

                ╔══╗
     ╔══╗       ║  ║──>────────>──┐
     ║  ║       ║  ║              │
     ║  ║──>─┐  ║  ║──>─┐         │
     ║  ║    │  ║  ╚══════════════════════════════════════════════════════════╗
     ║  ╚═══════║                                    14                       ║
     ║   15     ╚═══════════════════════════════════════════════════╦═══════╗ ║
     ╚══════════════════╤═╤══════════════════════════════════════╗  ║  ┌───>╢ ║
             └───>───┐ ╔v v╗─     │                    │ ─>╔═╗13 ║  ║  │  ┌>╢ ║
                     │ ║   ╟─     │                    █──>╢ ║──>╢  ║  │  │ ╚╤╝
              ╔═╗    │ ║   ╟─     │        ╔═════╗     │   ╚╤╝   ╚═╤╝  │  │    
              ║ ╟─────>╢   ╟─     └───────>╢     ║   12│               │  │
              ║ ║    │ ║ 6 ╟─              ╚╗    ╟──>──█─────>─────────┘  │
              ║ ║    │ ║   ╟─         ╔══╗ ╔╝ 11 ║     │                  │
              ║5║    │ ║   ╟─         ║  ╟>╢     ╟──── │ ────>────────────┘
              ║ ║    │ ║   ╟─     ┌──>║10║ ╚══╤══╝     │
            ╔═╝ ╟─┐  │ ║   ╟─     │ ┌>╢  ║             │
            ║ ╔═╝ │  │ ╚═══╝      │ │ ╚═╤╝             v
            ║ ║   │  │ ╔═══╗ 8    │ │                  │
     ╔══╗   ║ ║   │  └>╢ 7 ║─▄─>──┘ │                  │
     ║  ╟──>╢ ║   └───>╢   ║ █ ╔══╗ │                  │
    ┌╢  ║   ╚═╝        ╚═══╝ ├>╢  ║─┘                  │
    │║  ╚══════════════════════╝  ╚══════════════════════════════════╗
    │║             4                                                 ║
    │╚════════════════════════════════════════════════════════════╗  ║
    │                        │                         └─────────>╢  ║
    ^                        █────>──────────────────────────────>╢  ║
    │                        │     ╔═╗                            ╚═╤╝
╔═╗ │ 2             ╔══╗     └────>╢9╟──┐                              
║ ╟─▀──────────────>╢ 3╟──────────>╢ ║  │
║ ║                 ╚══╝           ╚╤╝  │
║ ║                                     │
║ ╚════════════════════════════════════════════════╗
║                         1                        ║
╚═══════════════════════════════════════════════╗  ║
                                        └──────>╢  ║
                                                ╚═╤╝         



